
@{
    ViewData["Title"] = "First";
}

<h1>First</h1>
<input type="text" />
<button id="button1" class="btn btn-outline-danger">執行</button>
<button id="button2" class="btn btn-outline-warning">取消</button>
<img src="~/images/1486.gif" id="loading"/>
<div class="alert alert-danger" id="div1"></div>

@section Styles{
    <style>
        #loading{
            display:none;
        }
    </style>

}

@section Scripts{
<script>

        const btn = document.querySelector('#button1');
        const btnCxl = document.querySelector('#button2');
        const myDiv = document.querySelector('#div1');
        const imgloading=document.querySelector('#loading');
    
        //    myDiv.innerHTML = "多多利納貝貝魯多"
        //})  改成顯示ApiController的Index方法


        //步驟一
        const xhr = new XMLHttpRequest();
        //加入loadstart事件，user使用體驗會更好，在程式睡五秒鐘時，user不會以為沒動靜就狂點
        xhr.addEventListener('loadstart', () => {

            btn.setAttribute('disable', 'disable');
            btn.textContent = "執行中...";
            imgloading.style.display = "inline";
            myDiv.innerHTML += `<h3>Ajax開始</h3>`

        })

        //加入loadend事件顯示已執行結束
        xhr.addEventListener('loadend', () => {

            btn.removeAttribute('disabled');
            btn.textContent = "Click"
            imgloading.style.display = "none"
            myDiv.innerHTML += `<h3>Ajax結束</h3>`

        })

        //時間超過timeout屬性設定的時間後會觸發此事件
        xhr.addEventListener('timeout' , ()=>{
            myDiv.innerHTML += `<h3>伺服器忙碌中，請稍後再來</h3>`
        })

        //呼叫abort方法時會觸發此事件
        xhr.addEventListener('abort' , ()=>{
            myDiv.innerHTML += `<h3>您停止了程式的執行</h3>`       
        
        })

        //呼叫abort方法，停止 Ajax 程式執行
        btnCxl.addEventListener('click' , ()=>{
            xhr.abort();        
        })

        btn.addEventListener('click', () => {
        myDiv.innerHTML = "Button Click"


        //步驟二對伺服器發出要求(Request)
       // xhr.open('GET', '/api/index');    //要顯示api的index方法，若沒指定可打'????'
       
       //改成下面寫法

        // xhr.open('GET', '/api/index');  //開發時不會錯，佈署到伺服器上就會有可能出錯
        // xhr.open('GET', '~/api/index'); //一定不可以，js沒有在用~
        
        //建議下面兩種
        //xhr.open('GET','@Url.Action("index","api")')
        //最直觀↓
        xhr.open('GET', '@Url.Content("/api/index")')



        xhr.timeout=3000;   //timeout屬性要放在open和send中間，代表程式若沒執行就關關閉
        xhr.send();

       
        //步驟三接收伺服器回傳的資料
        //建立事件監聽load，回傳這個data，用responseText這個屬性
        xhr.addEventListener('load', () => {
        const data = xhr.responseText

         //步驟四讀資料 JSON XML
         //因為不是json所以不用讀資料

         //步驟五顯示資料
         myDiv.innerHTML += `<h3>${data}</h3>`
        })

        })

</script>

}


