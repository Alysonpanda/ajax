@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

@*.Partail("Partial View 的名稱") *@
@Html.Partial("Partial1")
@Html.Partial("Partial2")   @*這裡的partial2沒有經過action所以不會回傳方法裡的viewbag字樣*@

@*改寫成表格*@
<table id="empTable" class="table table-bordered table-hover table-striped">
    <thead>
        <tr>
            <th>姓名</th>
            <th>年資</th>
            <th>薪水</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>


@section Styles{
    <style>
        p {
            background-color:palevioletred
        }
    </style>
}

@section Scripts{
    <script>
        //$('.display-4').on('mouseover' , function(){
        //$(this).css('color' , 'blue')
        //}).on('mouseout' , function(){
        //$(this).css('color' , 'green')
        //})

        //const emps = [{ "name": "Tom", "workYears": 3, "salary": 35000 },
        //{ "name": "Jack", "workYears": 5, "salary": 40000 },
        //{ "name": "Mary", "workYears": 7, "salary": 45000 }];
        //emps => array

        //叫出陣列中第1個
        //console.log(emps[1]); // { "name": "Jack", "workYears": 5, "salary": 40000 }
        //emps[1] => object

        //叫出陣列第一個的workYear屬性
        //console.log(emps[1].workYears); //5

        //全部叫出來
        //for(let i=0,max=emps.length;  i<max   ;i++){
        //    console.log(emps[i].name)
        //    console.log(emps[i].workYears)
        //    console.log(emps[i].salary)
        //}
        
        
        const emp = {
            "employees":
            [
                { "name": "Tom", "workYears": 3, "salary": 35000 },
                { "name": "Jack", "workYears": 5, "salary": 40000 },
                { "name": "Mary", "workYears": 7, "salary": 45000 }
            ]
        };
        console.log(emp);

        emp.employees.forEach( employee=>            
        {
            console.log("Name：",employee.name);
            console.log("workYears：",employee.workYears);
            console.log("salary：",employee.salary);
            console.log("-----------------");
        });

        //emp = {} => object => object.property  object["property"]
        //emp.employees = > [ ]
        //console.log(emp.length); //undefined
        //console.log(emp.employees.length) //3
        //console.log(emp.employees[2].name //Mary
        //[ ]
        //{ }
        //[{},{
        // "address":{},
        // "skills":[]
        // }]
        //ECMA Script Language  ES5、ES6、ES7 async await .......
        //JavaScript  Array.method()
        //emp.employees.forEach(function({
        //})
        //const datas = ["1", "2","3"].map((a, b, c) => {
        // //a => value [value, value]
        // //b => index 0,1,2
        //    //c => array ["1", "2","3"]
        // console.log(a)
        // console.log(b)
        // console.log(c)
        //})
        //const datas = ["a","b","c"].map(value=>{
        //    return  `<li>${value}</li>`
        //})
        ////datas["<li>a</li>","<li>b</li>"]
        ////console.log(datas)
        ////console.log(datas.join(""))
        //document.querySelector('#ul1').innerHTML = datas.join("")

        //js寫法多用const
        //map是新用法，=>箭頭函式取代function(){}，employee是固定屬性
        const datas = emp.employees.map(employee => {
            //employee = { "name": "Tom", "workYears": 3, "salary": 35000 } (解構)

            //解構賦值，先定義，表格中就不用<td>${employee.name}</td>、<td>${employee.workYears}</td>、<td>${employee.salary}</td>
            //再把name、workyear、salary的值塞進employee裡(賦值)

            const { name, workYears, salary } = employee
            //用反斜線可再加$，並直接加入<tr><td>
            return (
                ` <tr>
                        <td>${name}</td>
                        <td>${workYears}</td>
                        <td>${salary}</td>
                    </tr>
                    `
            )
        })
        document.querySelector('#empTable>tbody').innerHTML = datas.join("")



    </script>
}